- name: Full OS Upgrade
  hosts: docker_host
  become: true
  tasks:

    - name: Display warning message
      ansible.builtin.pause:
        prompt: |
          WARNING: This playbook will upgrade all packages and may require a reboot.
          Press ENTER to continue or Ctrl+C to abort.

    - name: Detect OS Family
      ansible.builtin.setup:
      register: sys_info
      changed_when: false

    - name: Upgrade Debian/Ubuntu Systems
      when: sys_info.ansible_facts.ansible_os_family == "Debian"
      block:
        - name: Update apt package cache
          ansible.builtin.apt:
            update_cache: yes

        - name: Upgrade all packages
          ansible.builtin.apt:
            upgrade: dist

        - name: Remove unused dependencies
          ansible.builtin.apt:
            autoremove: yes

    - name: Upgrade RHEL-based Systems (CentOS, Rocky, AlmaLinux, Fedora)
      when: sys_info.ansible_facts.ansible_os_family == "RedHat"
      block:
        - name: Update YUM/DNF package cache
          ansible.builtin.yum:
            name: '*'
            state: latest
          when: sys_info.ansible_facts.ansible_distribution != "Fedora"

        - name: Update DNF package cache (Fedora)
          ansible.builtin.dnf:
            name: '*'
            state: latest
          when: sys_info.ansible_facts.ansible_distribution == "Fedora"

        - name: Remove old dependencies
          ansible.builtin.yum:
            autoremove: yes
          when: sys_info.ansible_facts.ansible_distribution != "Fedora"

    - name: Gather package facts
      ansible.builtin.package_facts:

 #   - name: Check if reboot is required
 #     set_fact:
 #       reboot_required: "{{ 'linux-firmware' in ansible_facts.packages }}"
        
#    - name: Check if reboot is required
#      set_fact:
#        reboot_required: "{{ ('linux-firmware' in ansible_facts.packages) or (ansible_facts.os_family == 'Debian' and ansible_facts['ansible_local'] is defined and ansible_facts['ansible_local'].reboot_required is defined) }}"

    - name: Check if reboot is required on Debian
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_file

    - name: Determine if reboot is needed
      set_fact:
        reboot_required: "{{ ('linux-firmware' in ansible_facts.packages) or reboot_file.stat.exists }}"

    - name: Ask user how they want to handle the reboot (only if needed)
      ansible.builtin.pause:
        prompt: "System upgrade complete. A reboot is recommended. Type 'yes' to reboot now, 'schedule' for 2:00 AM, or 'no' to reboot manually."
      register: reboot_response
      when: reboot_required

    - name: Reboot immediately if chosen
      ansible.builtin.reboot:
        msg: "Rebooting after OS upgrade as requested"
      when: reboot_required and reboot_response.user_input | lower == 'yes'

    - name: Schedule a reboot for 2:00 AM if selected
      ansible.builtin.command:
        cmd: "shutdown -r 02:00"
      when: reboot_required and reboot_response.user_input | lower == 'schedule'

    - name: Display warning if reboot is declined
      ansible.builtin.debug:
        msg: "WARNING: The system must be rebooted manually, or some services may not function properly."
      when: reboot_required and reboot_response.user_input | lower == 'no'
